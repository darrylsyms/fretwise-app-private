import React, { createRef, useState, useEffect } from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

var releaseTimeout;

var Zoomable = function Zoomable(props) {
  var children = props.children,
      onReleaseAnimationStart = props.onReleaseAnimationStart,
      onReleaseAnimationEnd = props.onReleaseAnimationEnd,
      onTouchStart = props.onTouchStart,
      onTouchMove = props.onTouchMove,
      onTouchEnd = props.onTouchEnd,
      className = props.className;
  var releaseAnimationTimeout = props.releaseAnimationTimeout,
      maxScale = props.maxScale,
      zIndex = props.zIndex,
      style = props.style;
  releaseAnimationTimeout = releaseAnimationTimeout || 500;
  zIndex = zIndex || Number.MAX_SAFE_INTEGER;
  maxScale = maxScale || Number.MAX_SAFE_INTEGER;
  style = style || {};
  var elRef = createRef();

  var _useState = useState(0),
      initialDistance = _useState[0],
      setInitialDistance = _useState[1];

  var _useState2 = useState(0),
      initialAbsolutePositionX = _useState2[0],
      setInitialAbsolutePositionX = _useState2[1];

  var _useState3 = useState(0),
      initialAbsolutePositionY = _useState3[0],
      setInitialAbsolutePositionY = _useState3[1];

  var _useState4 = useState(0),
      zoom = _useState4[0],
      setZoom = _useState4[1];

  var _useState5 = useState(0),
      moveLeft = _useState5[0],
      setMoveLeft = _useState5[1];

  var _useState6 = useState(0),
      moveTop = _useState6[0],
      setMoveTop = _useState6[1];

  var _useState7 = useState(50),
      anchorLeftPercentage = _useState7[0],
      setAnchorLeftPercentage = _useState7[1];

  var _useState8 = useState(50),
      anchorTopPercentage = _useState8[0],
      setAnchorTopPercentage = _useState8[1];

  var _useState9 = useState(false),
      isMoving = _useState9[0],
      setMoving = _useState9[1];

  var _useState10 = useState(true),
      releaseAnimationDone = _useState10[0],
      setReleaseAnimationDone = _useState10[1];

  var getTouchData = function getTouchData(touchEvent) {
    var _touchEvent$target, _touchEvent$touches, _touchEvent$touches2;

    var elBox = touchEvent === null || touchEvent === void 0 ? void 0 : (_touchEvent$target = touchEvent.target) === null || _touchEvent$target === void 0 ? void 0 : _touchEvent$target.getBoundingClientRect();
    var touch1 = touchEvent === null || touchEvent === void 0 ? void 0 : (_touchEvent$touches = touchEvent.touches) === null || _touchEvent$touches === void 0 ? void 0 : _touchEvent$touches[0];
    var touch2 = touchEvent === null || touchEvent === void 0 ? void 0 : (_touchEvent$touches2 = touchEvent.touches) === null || _touchEvent$touches2 === void 0 ? void 0 : _touchEvent$touches2[1];

    var _ref = touch1 || {},
        x1 = _ref.clientX,
        y1 = _ref.clientY;

    var _ref2 = touch2 || {},
        x2 = _ref2.clientX,
        y2 = _ref2.clientY;

    var distance = Math.round(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)));
    var relativePosition = {
      x: Math.round((x1 - elBox.left + (x2 - elBox.left)) / 2),
      y: Math.round((y1 - elBox.top + (y2 - elBox.top)) / 2)
    };
    var absolutePosition = {
      x: Math.round((x1 + x2) / 2),
      y: Math.round((y1 + y2) / 2)
    };
    var anchor = {
      left: Math.round(relativePosition.x / elBox.width * 100),
      top: Math.round(relativePosition.y / elBox.height * 100)
    };
    return {
      distance: distance,
      absolutePosition: absolutePosition,
      anchor: anchor
    };
  };

  var twoFingerTouchStart = function twoFingerTouchStart(touchEvent) {
    touchEvent.preventDefault();

    var _getTouchData = getTouchData(touchEvent),
        distance = _getTouchData.distance,
        absolutePosition = _getTouchData.absolutePosition,
        anchor = _getTouchData.anchor;

    setInitialDistance(distance);
    setInitialAbsolutePositionX((absolutePosition === null || absolutePosition === void 0 ? void 0 : absolutePosition.x) || 0);
    setInitialAbsolutePositionY((absolutePosition === null || absolutePosition === void 0 ? void 0 : absolutePosition.y) || 0);
    setAnchorTopPercentage(anchor.top);
    setAnchorLeftPercentage(anchor.left);
  };

  var twoFingerTouchMove = function twoFingerTouchMove(touchEvent) {
    touchEvent.preventDefault();

    var _getTouchData2 = getTouchData(touchEvent),
        distance = _getTouchData2.distance,
        absolutePosition = _getTouchData2.absolutePosition;

    var currentZoom = Math.max(0, distance - initialDistance);
    setZoom(currentZoom);
    var currentMoveX = absolutePosition.x - initialAbsolutePositionX;
    setMoveLeft(currentMoveX);
    var currentMoveY = absolutePosition.y - initialAbsolutePositionY;
    setMoveTop(currentMoveY);

    if (currentZoom <= 0) {
      setInitialDistance(distance);
    }
  };

  var twoFingerTouchStop = function twoFingerTouchStop(event) {
    setMoving(false);
    setInitialDistance(0);
    setInitialAbsolutePositionX(0);
    setInitialAbsolutePositionY(0);
    setZoom(0);
    setMoveLeft(0);
    setMoveTop(0);
    setAnchorLeftPercentage(50);
    setAnchorTopPercentage(50);

    if (typeof onTouchEnd === 'function') {
      onTouchEnd(event);
    }

    if (typeof onReleaseAnimationStart === 'function') {
      onReleaseAnimationStart(event);
    }

    clearTimeout(releaseTimeout);
    releaseTimeout = setTimeout(function () {
      setReleaseAnimationDone(true);

      if (typeof onReleaseAnimationEnd === 'function') {
        onReleaseAnimationEnd(event);
      }
    }, releaseAnimationTimeout);
  };

  var touchStart = function touchStart(touchEvent) {
    var _touchEvent$touches3;

    if ((touchEvent === null || touchEvent === void 0 ? void 0 : (_touchEvent$touches3 = touchEvent.touches) === null || _touchEvent$touches3 === void 0 ? void 0 : _touchEvent$touches3.length) === 2) {
      setMoving(true);
      setReleaseAnimationDone(false);
      twoFingerTouchStart(touchEvent);

      if (typeof onTouchStart === 'function') {
        onTouchStart(touchEvent);
      }
    }
  };

  var touchMove = function touchMove(touchEvent) {
    var _touchEvent$touches4;

    if ((touchEvent === null || touchEvent === void 0 ? void 0 : (_touchEvent$touches4 = touchEvent.touches) === null || _touchEvent$touches4 === void 0 ? void 0 : _touchEvent$touches4.length) === 2) {
      twoFingerTouchMove(touchEvent);

      if (typeof onTouchMove === 'function') {
        onTouchMove(touchEvent);
      }
    }
  };

  var touchCancel = function touchCancel(event) {
    twoFingerTouchStop(event);
  };

  var touchEnd = function touchEnd(event) {
    twoFingerTouchStop(event);
  };

  useEffect(function () {
    var el = elRef === null || elRef === void 0 ? void 0 : elRef.current;
    el === null || el === void 0 ? void 0 : el.addEventListener('touchstart', touchStart);
    el === null || el === void 0 ? void 0 : el.addEventListener('touchmove', touchMove);
    el === null || el === void 0 ? void 0 : el.addEventListener('touchcancel', touchCancel);
    el === null || el === void 0 ? void 0 : el.addEventListener('touchend', touchEnd);
    el === null || el === void 0 ? void 0 : el.addEventListener('mouseup', touchEnd);
    return function () {
      el === null || el === void 0 ? void 0 : el.removeEventListener('touchstart', touchStart);
      el === null || el === void 0 ? void 0 : el.removeEventListener('touchmove', touchMove);
      el === null || el === void 0 ? void 0 : el.removeEventListener('touchcancel', touchCancel);
      el === null || el === void 0 ? void 0 : el.removeEventListener('touchend', touchEnd);
      el === null || el === void 0 ? void 0 : el.removeEventListener('mouseup', touchEnd);
    };
  }, [elRef]);
  var scale = Math.min(maxScale, 1 + zoom / 100);
  return React.createElement("div", {
    ref: elRef,
    style: _extends({
      position: isMoving || !releaseAnimationDone ? 'relative' : undefined,
      zIndex: isMoving || !releaseAnimationDone ? zIndex : undefined,
      transformOrigin: anchorLeftPercentage + "% " + anchorTopPercentage + "%",
      transform: "translate(" + moveLeft + "px, " + moveTop + "px) scale(" + scale + ")",
      transition: !isMoving ? "\n             " + releaseAnimationTimeout + "ms transform,\n             " + releaseAnimationTimeout + "ms transform-origin,\n             " + releaseAnimationTimeout + "ms z-index,\n             " + releaseAnimationTimeout + "ms position\n             " : undefined
    }, style),
    className: className
  }, children);
};

export default Zoomable;
//# sourceMappingURL=index.modern.js.map
